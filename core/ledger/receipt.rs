//! OCOS-Chain: Transaction Receipt & EventLog Module
//!
//! Records execution result of transactions, including status, gas used, and
//! generated event logs. Essential for user feedback, contract tracing, and auditing.

/// Transaction receipt structure: result of transaction execution
#[derive(Debug, Clone)]
pub struct Receipt {
    pub tx_hash: Vec<u8>,
    pub status: bool,           // Success (true) or failure (false)
    pub gas_used: u64,
    pub logs: Vec<EventLog>,    // List of event logs generated by the tx
}

/// Event log structure: for smart contract events, transfers, DAO actions, etc.
#[derive(Debug, Clone)]
pub struct EventLog {
    pub address: Vec<u8>,       // Address emitting the event (contract or account)
    pub topics: Vec<Vec<u8>>,   // Indexed event parameters (for filtering)
    pub data: Vec<u8>,          // Event data (serialized)
}

impl Receipt {
    /// Create a successful receipt with logs
    pub fn success(tx_hash: Vec<u8>, gas_used: u64, logs: Vec<EventLog>) -> Self {
        Receipt {
            tx_hash,
            status: true,
            gas_used,
            logs,
        }
    }

    /// Create a failed receipt
    pub fn failure(tx_hash: Vec<u8>, gas_used: u64, logs: Vec<EventLog>) -> Self {
        Receipt {
            tx_hash,
            status: false,
            gas_used,
            logs,
        }
    }
}

impl EventLog {
    /// Create a new event log
    pub fn new(address: Vec<u8>, topics: Vec<Vec<u8>>, data: Vec<u8>) -> Self {
        EventLog {
            address,
            topics,
            data,
        }
    }
}
